const express = require('express');
const app = express();
const mongoose = require('mongoose');

// Connect to MongoDB
mongoose.connect('mongodb://localhost/garbage-rewards', { useNewUrlParser: true, useUnifiedTopology: true });

// Define the user model
const userSchema = new mongoose.Schema({
  username: String,
  password: String,
  rewards: Number
});

const User = mongoose.model('User', userSchema);

// Define the reward model
const rewardSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  rewardType: String,
  rewardAmount: Number
});

const Reward = mongoose.model('Reward', rewardSchema);

// API endpoint to reward user
app.post('/reward', (req, res) => {
  const userId = req.body.userId;
  const rewardType = req.body.rewardType;
  const rewardAmount = req.body.rewardAmount;

  User.findById(userId, (err, user) => {
    if (err) {
      res.status(404).send({ message: 'User not found' });
    } else {
      const reward = new Reward({ userId, rewardType, rewardAmount });
      reward.save((err, reward) => {
        if (err) {
          res.status(500).send({ message: 'Error rewarding user' });
        } else {
          user.rewards += rewardAmount;
          user.save((err, user) => {
            res.send({ message: `Rewarded ${user.username} with ${rewardAmount} points` });
          });
        }
      });
    }
  });
});

// API endpoint to get user rewards
app.get('/rewards/:userId', (req, res) => {
  const userId = req.params.userId;

  User.findById(userId, (err, user) => {
    if (err) {
      res.status(404).send({ message: 'User not found' });
    } else {
      res.send({ rewards: user.rewards });
    }
  });
});

app.listen(3000, () => {
  console.log('Server listening on port 3000');
});
